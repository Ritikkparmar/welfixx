generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(uuid())
  clerkUserId    String          @unique
  email          String          @unique
  name           String?
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastActive     DateTime?
  level          Int             @default(1)
  rewardPoints   Int             @default(0)
  streak         Int             @default(0)
  accounts       Account[]
  budgets        Budget?
  transactions   Transaction[]
  userChallenges UserChallenge[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  isDefault    Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  accountId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  category          String
  lastProcessed     DateTime?
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id            String    @id @default(uuid())
  amount        Decimal
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastAlertSent DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}

model Challenge {
  id             String              @id @default(uuid())
  title          String
  description    String
  type           ChallengeType
  reward         Int                 @default(10)
  xpPoints       Int                 @default(5)
  difficulty     ChallengeDifficulty @default(EASY)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userChallenges UserChallenge[]

  @@map("challenges")
}

model UserChallenge {
  id          String          @id @default(uuid())
  userId      String
  challengeId String
  status      ChallengeStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@map("user_challenges")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ChallengeType {
  DAILY
  WEEKLY
  MONTHLY
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ChallengeStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
